1. 서블릿 객체의 정보 공유
   제공되는  API : 
      HttpServletRequest, HttpSession, ServletContext

   1.1 HttpServletRequest
      - 요청이 들어올 때 컨테이너에서 생성이 되고, 브라우저로
        response(응답)이 전송되는 순간 바로 자동으로 삭제가 됨.
        그래서, 일회성 객체임.
      - HttpServletRequest 에 데이터를 등록하고 포워드가 아닌
        리다이렉트를 하면 리다이렉트가 된 서블릿에서는
        HttpServletRequest 로 부터 데이터를 취득할 수 없음.

   1.2 HttpSession
      - 브라우저를 종료(invalidate() 호출)하거나 로그아웃을 하면 
        브라우저와 매핑된 HttpSession 도 자동으로 삭제가 됨.

   1.3 ServletContext
      - ServletContext 는 servlet Container 가 살아있는 동안만
        유지가 됨으로, HttpSession 처럼 브라우저가 종료가 되더라도
        여전히 유지가 됨.


2. 필터

   여러 서블릿에서 반복되는 코드를 일괄적으로 처리시 사용.
   => 서블릿이 실행되기 전에 필터부터 실행이 되어야 함.

   2.1 동작 순서
      a. 서블릿 컨테이너가 기동시 필터 객체가 생성.
      b. 클라이언트가 서블릿을 요청시 필터가 먼저 실행.
      c. 필터는 서블릿이 수행되기전의 처리를 수행.
           ----------- 사전 처리 -----------
      d. 클라이언트가 요청했던 서블릿을 호출
      e. 서블리이 요청한 처리를 수행.
      f. 서블릿의 처리가 끝나면, 제어권이 필터로 반환됨.
           ----------- 사후 처리 -----------
      g. 필터는 사후 처리를 수행.
      h. 클라이언트에게 응답 메세지를 전송.

   2.2 필터를 위한 API
      Filter(인터페이스), 
      HttpFilter(class), 
      FilterConfig(초기화 변수 관련)

      doFilter() : 사전, 사후 경계 기준, 서블릿을 호출.

   2.3 활용 범위
      - 서블릿 수행 시간 체크
      - request 인코딩 처리( 등록, 수정, 조회-검색조건 ) 
      - 로그인 상태 확인 처리( 로그인페이 이동 기준 )

      - 각 기능별 Filter 을 만든 후 사용하면, Filter Chain 으로 실행됨.

3. 리스너

   웹 애플리케이션 프로그램의 이벤트 처리를 담당.
   이벤트 대상은 reqeust, session, context 임.
   이 3가지의 객체에 대해서 데이터가 저장, 수정, 삭제 와 관련된
   이벤트를 감지하고 처리.
   