1. TCP/IP
  [ 클라이언트 ]
  애플리케이션 layer
     HTTP 클라이언트(웹 브라우저) : http request(text/html)
  트랜스포트 layer
     TCP
  네트워크 layer
     IP
  링크 layer
     네트워크(라우터)

  [ 서버 ]
  애플리케이션 layer
     HTTP server(tomcat) : http response(text/html)
     ( servlet container )
                           결과 : html - 정적 html
                                       - 동적 html : 
                                         servlet(java), 
                                         jsp(java server page
                                                html, tag
                                             ) => servlet
                                         sevlet : 화면적요소 + 기능적인 요소 => html

      결과 html을 reponse 를 해야함.( 클라이언트로 네트워크로 전송 )
      네트워크(stream)에 쓴다.( stream에 write(결과 html) 를 호출. )
  트랜스포트 layer
     TCP
  네트워크 layer
     IP
  링크 layer
     네트워크(라우터)

2. HTTP 특징
   - 비연결성
     서버와의 지속적인 연결을 유지하지 않는 것.
     request( connection : keep alive ) -> response ( connection : close )

     특별한 경우에는 connection : keep alive 로 설정해서 request를 전송.
     서버에서는 response 로 연결 유효 시간, 타임 아웃 등의 정보를 클라이언트에게 전송.

   - 무상태(stateless)
     웹 서버가 클라이언트의 상태 정보( 수신된 데이터 )를 유지 하지 않음.
     다양한 request에 대한 데이터를 모두 관리하지 않음.
     request( data 전송 ) -> response( data 수신 및 처리 )

     하지만, 경우에 따라서 유지되어야 하는 정보도 있음.
     예를 들면, 로그인 한 사람의 사용자 정보 -> 
     cookie( clinet ), session( server ) 을 이용.


3. HTTP 요청(request) 프로토콜 구조
   3.1 start-line
       요청방식, 요청URI, 프로토콜 버전

       - 요청방식
         OPTIONS : 서버가 제공하고 있는 메소드의 유형을 요청.
         HEAD : response의 header 와 body 중에서 header 만 요청.
         TRACE : 보통 사용하지 않음. 
                 웹 서버 앞단에 proxy 서버가 위치한 경우이면,
                 경로가 변경될 수 도 있음. 변경되는 경로를 요청.

   3.2 message-header
       사용자 데이터는 아님.
       주로 서버가 사용하는 데이터임.
       key : value 형태로 데이터를 관리.

          - mime type
            text : text/html
            image : image/png
            audio : audio/wav
            video : video/webm
            application : 이진데이터와 관련된 모든 정보
                          application/pdf

       message-body와의 구분을 위해서 한줄 공백(CRLF)으로 구분
   3.3 message-body
       사용자가 입력한 데이터

4. HTTP 응답(response) 프로토콜 구조
   4.1 status-line
   4.2 message-header
       
       message-body와의 구분을 위해서 한줄 공백(CRLF)으로 구분
   4.3 message-body

5. HTTP 상태 코드
   5.1 상태 코드 클래스
       - 1XX : Information class
               리퀘스트를 받아서 처리중의 정보
       - 2XX : Success class
               리퀘스트를 받아서 정상적으로 처리했음의 정보

               200 OK
               204 No Content : 리퀘스트가 성공했으나, 돌려줄 리소스가 없음.

       - 3XX : Redirection class
               리퀘스트를 받아서 완료를 위해 추가적으로 동작(처리)가 필요함의 정보

               302 Found : 새로운 URI가 할당되어 새로운 URI를 참조해야 함을 알림.
               303 See other : 새로운 URI를 참조해야 하나 GET 방식으로 참조해야 함을 알림.

       - 4XX : Client Error
               클라이언트의 리퀘스트에 대해 처리 및 이해가 불가능 

               400 Bad Request : 리퀘스트가 잘못되어, 확인 후 재송신이 필요함.
               404 Not Found : 요청한 리퀘스트에 대해서 서버에서 찾을 수 없음.
               403 Forbidden : 리퀘스트된 리소스의 액세스가 거부되었음.
               401 Unauthorized : 인증이 필요함을 알림.

       - 5XX : Server Error
               클라이언트의 리퀘스트에 대해서 처리가 실패함의 정보

               500 Internal Server Error : 서버에서 리퀘스트를 처리중 에러가 발생.
               503 Service Unavailable : 일시적으로 서버의 과부하 상태이거나 검검중으로
                                        현재의 리퀘스트를 처리할 수 없음.


6. HTTP 헤더 필드
   6.1 일반 헤더 필드
       - Connection : keep alive, close 등의 커넥션 관리용
       - Date : 메세지 생성 날짜
       - Warning : 에러 통지
       - Transfer-Encoding : 메세지 바디의 전송 코딩 형식 지정.

   6.2 request 헤더 필드
       - Accept-Charset : 문자셋 우선 순위
       - Accept-Encoding : 콘텐츠 인코딩 우선 순위
       - Accept-Language : 언어 우선 순위
       - Host : 요구된 리소스의 호스트 정보
       - User-Agent : HTTP 클라이언트의 정보

   6.3 response 헤더 필드
       - Server : HTTP 서버 정보

   6.4 엔터티(콘텐츠) 헤더 필드
       - Allow : 리소스가 제공하는 HTTP 메소드
       - Content-Encoding : 엔터티 바디에 적용되는 내용의 인코딩
       - Content-Language : 엔터티의 언어
       - Content-Length : 엔터티의 사이즈( 단위는 바이트 )
       - Content-Type : 엔터티의 미디어 타입( MIME type )
                        text/html, application/pdf
       - Expires : 엔터티의 유효기한 날짜
       - Last-Modified : 리소스의 최종 갱신 날짜


7. HTTP와 연계한 웹 서버
   7.1 통신 중계 목적
       - 프록시
         서버와 클라이언트의 양쪽을 중계하는 프로그램임.
         클라이언트로부터의 리퀘스트를 서버에 전송하고, 서버로부터의 응답을 클라이언트에게 전달.
       - 게이트웨이
         프록시 서버와 비슷한 역할을 하나, HTTP 서버 이외의 서버(데이터베이스 등)와의 중계역할을 함.
       - 터널
         서버와의 통신을 위해서 통신 경로를 확립함. 이때 클라이언트는 SSL과 같은 암호화
         통신을 통해 서버와 접속하게 됨.

   7.2 리소스 저장 목적
       - 캐시
         프록시 서버와 클라이언트의 로컬에 보관된 리소스의 사본을 의미함.
         캐시를 사용하면, 리소스를 가진 서버의 접속을 줄이는 것이 가능하기 때문에
         서버와의 통신량과 통신 시간을 절약할 수 있는 장점이 있음.

         단, 서버에 캐시가 있다고 하더라도 항상 클라이언트의 요청에 대해서
         캐시를 돌려 준다고 할 수 없음. 캐시는 유효기간이 있기 때문임.

         그리고, 클라이언트측의 캐시는 브라우저에서 보존하는 임시 파일을 말함.

8. HTTP 통신의 단점
   8.1 평문이기 때문에 도청이 가능함.
       통신 내용을 암호화하지 않은 상태에서 송수신 함으로 
       다양한 통신 단계에서 스니퍼 등의 툴을 이용해서 도청이 가능함.

   8.2 통신 상대를 확인하지 않기 때문에 위장 통신이 가능함.
       상대를 확인할 수 있는 증명서가 없으므로, 위장 통신이 가능함.

   8.3 통신 내용에 대해서 완정성을 증명할 수 없기 때문에 변조가 가능함.
       완전성이란 통신 내용에 수정이나 변경이 없음을 나타낼 수 있는 증명을 할 수
       없다는 것임. 따라서, 수신된 내용이 송신 내용과 다를 수 있음.

9. 서블릿 생성

   9.1 톰캣 서버 두 가지의 아키텍처로 구성
       - 웹서버 + 서블릿 컨테이너
       - 웹서버에서 처리를 할 수 없는 동적인 페이지 생성은 servlet가 담당함.
       - 서블릿 컨테이너가 해당하는 servlet의 객체가 존재하는지 체크.
       - 해당하는 servlet의 .class( 컴파일된 바이트 코드 ) 를 이용해서 servlet 객체 생성
         디폴트 생성자를 이용해서 객체 생성 -> 멤머변수 초기화를 위해서 init() 메소드를 호출

       - 여기부터 클라이언트가 요청했던, get, post 를 처리를 해야함.
       - 자바에서 스레드 생성시, 대상은 메소드임.
         메소드를 사용하기 위해서는 어떤 클래스에 객체를 생성하고, 
         생성된 객체의 메소드를 스레드로 등록해서 사용할 수 있음.
       - doGet(), doPost() 멤버 메소드를 스레드로 처리함.
         클라이언트가 10개면, 스레드도 10개지만, servlet 객체는 하나임.
       - 스레드의 정확한 대상은 HttpServlet.service() 임.

       - sevlet 클래스도 상속관계
         servlet interface - GenericServlet - HttpServlet - LoginServlet

         HttpServlet.service() - clinet 요청에 따라 분기처리되는 부분이 구현되어 있음.
                                 분기처리된다는 것은 get, post 요청에 따라 doGet(), doPost() 가
                                 호출이 되도록 함.

         LoginServlet.doGet()     /* 콜백 메소드 역할 */
         LoginServlet.doPost()    /* 콜백 메소드 역할 */
         
   9.2 서블릿 컨테이너가 동작하기 위한 요소
       - xwb.xml ( 웹 애플리케이션 배치 기술 문서 ) 
          <servlet> 와 <servlet-mapping> 중요함.

            <servlet>
               <servlet-name>loginProcess</servlet-name>   /* servlet 객체명 */
               <servlet-class>com.ssamz.web.user.LoginServlet</servlet-class>  /* .class */
            </servlet>
            <servlet-mapping>                               /* client 요청 처리 매핑 */
               <servlet-name>loginProcess</servlet-name>    /* servlet 객체명 */
               <url-pattern>/loginProcess</url-pattern>     /* client 요청 URI */
            </servlet-mapping>

   9.3 웹 애플리케이션 접속 경로 수정
       http://localhost:8080/BoardWeb

       => http://localhost:8080/   server.xml 의 <context> 부분을 수정


   9.4 웹 애플리케이션 웰컴 페이지 접속 경로 수정


       http://localhost:8080/BoardWeb/login.html

       => http://localhost:8080/BoardWeb/ 로 접속하고자 하려면, web.xml 의 <welcome-file> 부분을 수정.


10. H2 데이터베이스

   10.1 SQL 종류
       - DDL : 데이터 정의어
       - DML : 데이터 조작어, insert, update, delete
       - DQL : 데이터 검색어
       - DCL : 데이터 제어어, insert, update, delete 에 대한 권한 제어
       - TCL : 트랜잭션 제어어


